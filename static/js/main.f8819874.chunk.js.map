{"version":3,"sources":["models/letters.ts","components/user-selection/user-selection-item.tsx","components/user-selection/user-selection-block.tsx","components/user-selection/user-selection-list.tsx","App.tsx","hooks/useFetch.ts","reportWebVitals.ts","index.tsx"],"names":["letters","UserSelectionItem","user","isSelected","toggleSelection","lastName","firstName","type","checked","onChange","UserSelectionBlock","letter","users","listItems","map","id","length","UserSelectionList","filter","startsWith","className","App","url","useState","isLoading","setIsLoading","data","setData","error","setError","fetch","then","response","json","catch","finally","useFetch","doFetch","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAAO,IAAMA,EAAU,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KCjBG,SAASC,EAAT,GAIqB,IAHxBC,EAGuB,EAHvBA,KACAC,EAEuB,EAFvBA,WACAC,EACuB,EADvBA,gBAEA,OACI,6BACI,kCACKF,EAAKG,SADV,OAC0BH,EAAKI,UAC3B,uBACIC,KAAK,WACLC,QAASL,EACTM,SAAU,kBAAML,EAAgBF,WCX7C,SAASQ,EAAT,GAIsB,IAHzBC,EAGwB,EAHxBA,OACAC,EAEwB,EAFxBA,MACAR,EACwB,EADxBA,gBAEMS,EAAYD,EAAME,KAAI,SAACZ,GACzB,OACI,cAACD,EAAD,CAEIC,KAAMA,EACNC,YAAY,EACZC,gBAAiBA,GAHZF,EAAKa,OAQtB,OACI,oCACI,6BAAKJ,IACJC,EAAMI,OAAS,6BAAKH,IAAkB,0CCpBnD,SAAST,KAEF,SAASa,EAAT,GAA+D,IAAlCL,EAAiC,EAAjCA,MAQ1BC,EAPeb,EAAQc,KAAI,SAACH,GAC9B,MAAO,CACHA,SACAC,MAAOA,EAAMM,QAAO,qBAAGb,SAAwBc,WAAWR,UAInCG,KAAI,YAAwB,IAArBH,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC1C,OACI,cAACF,EAAD,CAEIC,OAAQA,EACRC,MAAOA,EACPR,gBAAiBA,GAHZO,MAQjB,OACI,qCACI,2CACA,qBAAKS,UAAU,sBAAf,SAAsCP,OCVnCQ,MAlBf,WAAgB,IAAD,ECHR,SAAqBC,GAAc,IAAD,EACHC,oBAAS,GADN,mBAC9BC,EAD8B,KACnBC,EADmB,OAEbF,mBAAmB,MAFN,mBAE9BG,EAF8B,KAExBC,EAFwB,OAGXJ,mBAAiB,IAHN,mBAG9BK,EAH8B,KAGvBC,EAHuB,KAmBrC,MAAO,CAAC,CAAEH,OAAME,QAAOJ,aAdP,WACZC,GAAa,GACbI,EAAS,IACTC,MAAMR,GACDS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACL,GACHC,EAAQD,MAEXQ,OAAM,WACHL,EAAS,4CAEZM,SAAQ,kBAAMV,GAAa,QDZUW,CAC1C,kEAFO,0BACFV,EADE,EACFA,KAAMF,EADJ,EACIA,UAAWI,EADf,EACeA,MAASS,EADxB,KASX,OAJAC,qBAAU,WACND,MACD,IAGC,iCACKb,GAAa,2CACbI,GAAS,4BAAIA,KACZA,GAASF,GAAQ,cAACT,EAAD,CAAmBL,MAAOc,QEF1Ca,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBV,MACjB,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJxBO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.f8819874.chunk.js","sourcesContent":["export const letters = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n];\n","import React from 'react';\nimport { User } from '../../models/user';\n\nexport interface UserSelectionItemProps {\n    user: User;\n    isSelected: boolean;\n    toggleSelection: (user: User) => void;\n}\n\nexport function UserSelectionItem({\n    user,\n    isSelected,\n    toggleSelection,\n}: UserSelectionItemProps) {\n    return (\n        <li>\n            <label>\n                {user.lastName}&nbsp;{user.firstName}\n                <input\n                    type=\"checkbox\"\n                    checked={isSelected}\n                    onChange={() => toggleSelection(user)}\n                />\n            </label>\n        </li>\n    );\n}\n","import { UserSelectionItem } from './user-selection-item';\nimport { User } from '../../models/user';\nimport * as React from 'react';\n\nexport interface UserSelectionBlockProps {\n    letter: string;\n    users: Array<User>;\n    toggleSelection: (user: User) => void;\n}\n\nexport function UserSelectionBlock({\n    letter,\n    users,\n    toggleSelection,\n}: UserSelectionBlockProps) {\n    const listItems = users.map((user) => {\n        return (\n            <UserSelectionItem\n                key={user.id}\n                user={user}\n                isSelected={false}\n                toggleSelection={toggleSelection}\n            />\n        );\n    });\n\n    return (\n        <section>\n            <h3>{letter}</h3>\n            {users.length ? <ul>{listItems}</ul> : <div>----</div>}\n        </section>\n    );\n}\n","import { User } from '../../models/user';\nimport { letters } from '../../models/letters';\nimport { UserSelectionBlock } from './user-selection-block';\nimport React from 'react';\n\nexport interface UserSelectionListProps {\n    users: Array<User>;\n}\n\nfunction toggleSelection() {}\n\nexport function UserSelectionList({ users }: UserSelectionListProps) {\n    const groupedUsers = letters.map((letter) => {\n        return {\n            letter,\n            users: users.filter(({ lastName }) => lastName.startsWith(letter)),\n        };\n    });\n\n    const listItems = groupedUsers.map(({ letter, users }) => {\n        return (\n            <UserSelectionBlock\n                key={letter}\n                letter={letter}\n                users={users}\n                toggleSelection={toggleSelection}\n            />\n        );\n    });\n\n    return (\n        <>\n            <h2>Employees</h2>\n            <div className=\"user-selection-list\">{listItems}</div>\n        </>\n    );\n}\n","import React, { useEffect } from 'react';\nimport { useFetch } from './hooks/useFetch';\nimport { User } from './models/user';\nimport { UserSelectionList } from './components/user-selection/user-selection-list';\n\nfunction App() {\n    const [{ data, isLoading, error }, doFetch] = useFetch<Array<User>>(\n        'https://yalantis-react-school-api.yalantis.com/api/task0/users'\n    );\n\n    useEffect(() => {\n        doFetch();\n    }, []);\n\n    return (\n        <main>\n            {isLoading && <p>Loading...</p>}\n            {error && <p>{error}</p>}\n            {!error && data && <UserSelectionList users={data} />}\n        </main>\n    );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useFetch<T>(url: string) {\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState<T | null>(null);\n    const [error, setError] = useState<string>('');\n\n    const doFetch = () => {\n        setIsLoading(true);\n        setError('');\n        fetch(url)\n            .then((response) => response.json())\n            .then((data: T) => {\n                setData(data);\n            })\n            .catch(() => {\n                setError('Error occurred while loading the data');\n            })\n            .finally(() => setIsLoading(false));\n    };\n\n    return [{ data, error, isLoading }, doFetch] as const;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}