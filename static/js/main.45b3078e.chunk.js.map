{"version":3,"sources":["contexts/users.tsx","models/letters.ts","components/user-selection/user-selection-item.tsx","components/user-selection/user-selection-block.tsx","components/user-selection/user-selection-list.tsx","components/user-selection/user-selection-list-container.tsx","models/months.ts","components/user-birthday/user-birthday-item.tsx","components/user-birthday/user-birthday-list.tsx","components/user-birthday/user-birthday-list-container.tsx","pages/employees.tsx","hooks/useFetch.ts","pages/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UsersContext","createContext","users","toggleSelection","setUsers","UsersProvider","props","React","useState","useCallback","id","updatedUsers","map","user","isSelected","value","useMemo","Provider","children","letters","UserSelectionItem","useContext","lastName","firstName","type","checked","onChange","UserSelectionBlock","letter","listItems","length","UserSelectionList","filter","startsWith","className","UserSelectionListContainer","months","formatDate","dt","date","Date","getDate","getMonth","getFullYear","UserBirthdayItem","dob","UserBirthdayList","reduce","grouped","month","push","Array","Boolean","monthIndex","UserBirthdayListContainer","selectedUsers","EmployeesPage","url","isLoading","setIsLoading","data","setData","error","setError","fetch","then","response","json","catch","finally","useFetch","doFetch","useEffect","HomePage","to","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45b3078e.chunk.js","sourcesContent":["import React, { createContext, useCallback } from 'react';\nimport { SelectableUser } from '../models/user';\n\ninterface Props {\n    children: JSX.Element[] | JSX.Element;\n}\n\ninterface UserContextType {\n    users: Array<SelectableUser>;\n    toggleSelection: (user: SelectableUser) => void;\n    setUsers: (users: Array<SelectableUser>) => void;\n}\n\nexport const UsersContext = createContext<UserContextType>({\n    users: [],\n    toggleSelection: () => {},\n    setUsers: () => {},\n});\n\nexport function UsersProvider(props: Props) {\n    const [users, setUsers] = React.useState<Array<SelectableUser>>([]);\n\n    const toggleSelection = useCallback(\n        ({ id }: SelectableUser) => {\n            const updatedUsers = users.map((user) => {\n                if (user.id === id) {\n                    return {\n                        ...user,\n                        isSelected: !user.isSelected,\n                    };\n                }\n                return user;\n            });\n            setUsers(updatedUsers);\n        },\n        [users]\n    );\n\n    const value = React.useMemo(() => ({ users, setUsers, toggleSelection }), [\n        users,\n        toggleSelection,\n    ]);\n    return (\n        <UsersContext.Provider value={value}>\n            {props.children}\n        </UsersContext.Provider>\n    );\n}\n","export const letters = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n];\n","import React from 'react';\nimport { SelectableUser } from '../../models/user';\nimport { UsersContext } from '../../contexts/users';\n\nexport interface UserSelectionItemProps {\n    user: SelectableUser;\n}\n\nexport function UserSelectionItem({ user }: UserSelectionItemProps) {\n    const { toggleSelection } = React.useContext(UsersContext);\n\n    return (\n        <li>\n            <label>\n                {user.lastName}&nbsp;{user.firstName}\n                <input\n                    type=\"checkbox\"\n                    checked={user.isSelected || false}\n                    onChange={() => toggleSelection(user)}\n                />\n            </label>\n        </li>\n    );\n}\n","import { UserSelectionItem } from './user-selection-item';\nimport { SelectableUser } from '../../models/user';\nimport * as React from 'react';\n\nexport interface UserSelectionBlockProps {\n    letter: string;\n    users: Array<SelectableUser>;\n}\n\nexport function UserSelectionBlock({ letter, users }: UserSelectionBlockProps) {\n    const listItems = users.map((user) => {\n        return <UserSelectionItem key={user.id} user={user} />;\n    });\n\n    return (\n        <section>\n            <h3>{letter}</h3>\n            {users.length ? <ul>{listItems}</ul> : <div>----</div>}\n        </section>\n    );\n}\n","import { SelectableUser } from '../../models/user';\nimport { letters } from '../../models/letters';\nimport { UserSelectionBlock } from './user-selection-block';\nimport React from 'react';\n\nexport interface UserSelectionListProps {\n    users: Array<SelectableUser>;\n}\n\nexport function UserSelectionList({ users }: UserSelectionListProps) {\n    const groupedUsers = letters.map((letter) => {\n        return {\n            letter,\n            users: users.filter(({ lastName }) => lastName.startsWith(letter)),\n        };\n    });\n\n    const listItems = groupedUsers.map(({ letter, users }) => {\n        return (\n            <UserSelectionBlock key={letter} letter={letter} users={users} />\n        );\n    });\n\n    return (\n        <div>\n            <h2>Employees</h2>\n            <div className=\"flex-row user-selection-list\">{listItems}</div>\n        </div>\n    );\n}\n","import React, { useContext } from 'react';\nimport { UsersContext } from '../../contexts/users';\nimport { UserSelectionList } from './user-selection-list';\n\nexport function UserSelectionListContainer() {\n    const { users } = useContext(UsersContext);\n    return <UserSelectionList users={users} />;\n}\n","export const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n];\n","import React from 'react';\nimport { User } from '../../models/user';\nimport { months } from '../../models/months';\n\nexport interface UserBirthdayItemProps {\n    user: User;\n}\n\nfunction formatDate(dt: string): string {\n    const date = new Date(dt);\n\n    return (\n        date.getDate() +\n        ' ' +\n        months[date.getMonth()] +\n        ', ' +\n        date.getFullYear()\n    );\n}\n\nexport function UserBirthdayItem({ user }: UserBirthdayItemProps) {\n    return (\n        <li>\n            {user.lastName}&nbsp;{user.firstName}&nbsp;&ndash;&nbsp;\n            {formatDate(user.dob)}&nbsp;year\n        </li>\n    );\n}\n","import { User } from '../../models/user';\nimport React from 'react';\nimport { UserBirthdayItem } from './user-birthday-item';\nimport { months } from '../../models/months';\n\nexport interface UserBirthdayListProps {\n    users: Array<User>;\n}\n\nexport function UserBirthdayList({ users }: UserBirthdayListProps) {\n    const groupedUsers = users\n        .reduce<Array<Array<User>>>((grouped, user) => {\n            const month = new Date(user.dob).getMonth();\n            grouped[month] = grouped[month] || [];\n            grouped[month].push(user);\n            return grouped;\n        }, new Array(11))\n        .filter(Boolean);\n\n    const listItems = groupedUsers.map((users, monthIndex) => {\n        if (!users) {\n            return null;\n        }\n        return (\n            <section key={monthIndex}>\n                <h3>{months[monthIndex]}</h3>\n                <ul>\n                    {users.map((user) => {\n                        return (\n                            <UserBirthdayItem\n                                key={user.id}\n                                user={user}\n                            ></UserBirthdayItem>\n                        );\n                    })}\n                </ul>\n            </section>\n        );\n    });\n\n    return (\n        <aside>\n            <h2>Employees birthday</h2>\n            {users.length ? (\n                <div className=\"flex-row user-birthday-list\">{listItems}</div>\n            ) : (\n                <p>No selected employees</p>\n            )}\n        </aside>\n    );\n}\n","import React, { useContext, useMemo } from 'react';\nimport { UsersContext } from '../../contexts/users';\nimport { UserBirthdayList } from './user-birthday-list';\n\nexport function UserBirthdayListContainer() {\n    const { users } = useContext(UsersContext);\n    const selectedUsers = useMemo(() => {\n        return users.filter((user) => user.isSelected);\n    }, [users]);\n\n    return <UserBirthdayList users={selectedUsers} />;\n}\n","import React, { useContext, useEffect } from 'react';\nimport { useFetch } from '../hooks/useFetch';\nimport { SelectableUser } from '../models/user';\nimport { UsersContext } from '../contexts/users';\nimport { UserSelectionListContainer } from '../components/user-selection/user-selection-list-container';\nimport { UserBirthdayListContainer } from '../components/user-birthday/user-birthday-list-container';\n\nexport function EmployeesPage() {\n    const [{ data, isLoading, error }, doFetch] = useFetch<\n        Array<SelectableUser>\n    >('https://yalantis-react-school-api.yalantis.com/api/task0/users');\n    const { setUsers } = useContext(UsersContext);\n\n    useEffect(() => {\n        doFetch();\n    }, [doFetch]);\n\n    useEffect(() => {\n        if (data) {\n            setUsers(data);\n        }\n    }, [setUsers, data]);\n\n    return (\n        <main>\n            {isLoading && <p>Loading...</p>}\n            {error && <p>{error}</p>}\n\n            {!error && data && (\n                <div className=\"flex-row app-container\">\n                    <UserSelectionListContainer />\n                    <UserBirthdayListContainer />\n                </div>\n            )}\n        </main>\n    );\n}\n","import { useCallback, useState } from 'react';\n\nexport function useFetch<T>(url: string) {\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState<T | null>(null);\n    const [error, setError] = useState<string>('');\n    const doFetch = useCallback(() => {\n        setIsLoading(true);\n        setError('');\n        fetch(url)\n            .then((response) => response.json())\n            .then((data: T) => {\n                setData(data);\n            })\n            .catch(() => {\n                setError('Error occurred while loading the data');\n            })\n            .finally(() => setIsLoading(false));\n    }, [url]);\n\n    return [{ data, error, isLoading }, doFetch] as const;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport function HomePage() {\n    return (\n        <div className=\"home-page\">\n            <h1>Home page for the technical task</h1>\n            <p>\n                Please navigate to <Link to=\"/employees\">/employees</Link>\n            </p>\n        </div>\n    );\n}\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink,\n} from 'react-router-dom';\nimport { UsersProvider } from './contexts/users';\nimport { EmployeesPage } from './pages/employees';\nimport { HomePage } from './pages/home';\n\nfunction App() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <main>\n                <nav>\n                    <ul className=\"horizontal-menu\">\n                        <li>\n                            <NavLink to=\"/\" exact>\n                                Home\n                            </NavLink>\n                        </li>\n                        <li>\n                            <NavLink to=\"/employees\">Employees</NavLink>\n                        </li>\n                    </ul>\n                </nav>\n                <Switch>\n                    <Route path=\"/employees\">\n                        <UsersProvider>\n                            <EmployeesPage />\n                        </UsersProvider>\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <HomePage />\n                    </Route>\n                </Switch>\n            </main>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { UsersProvider } from './contexts/users';\n\nReactDOM.render(\n    <React.StrictMode>\n        <UsersProvider>\n            <App />\n        </UsersProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}